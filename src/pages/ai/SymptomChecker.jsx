import React, { useState, useEffect } from 'react';
import { supabase } from '../../utils/main';
import { openai, MODELS } from '../../utils/openai';
import Spinner from '../../components/Spinner';

const SymptomChecker = () => {
  const [symptoms, setSymptoms] = useState('');
  const [age, setAge] = useState('');
  const [gender, setGender] = useState('');
  const [medicalHistory, setMedicalHistory] = useState('');
  const [duration, setDuration] = useState('');
  const [loading, setLoading] = useState(false);
  const [results, setResults] = useState(null);
  const [error, setError] = useState(null);
  const [notification, setNotification] = useState(null);
  const [userProfile, setUserProfile] = useState(null);
  const [useProfileData, setUseProfileData] = useState(true);
  
  // Fetch user profile data
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) return;
        
        const { data, error } = await supabase
          .from('detailed_profiles')
          .select('*')
          .eq('id', user.id)
          .single();
          
        if (error) throw error;
        
        if (data) {
          setUserProfile(data);
          // Pre-fill from profile if the user wants to use profile data
          if (useProfileData) {
            setAge(calculateAge(data.date_of_birth));
            setGender(data.gender || '');
            
            // Also fetch medical history (diseases)
            const { data: diseases, error: diseasesError } = await supabase
              .from('user_diseases')
              .select('*')
              .eq('user_id', user.id);
              
            if (!diseasesError && diseases) {
              setMedicalHistory(diseases.map(d => d.disease_name).join(', '));
            }
          }
        }
      } catch (error) {
        console.error('Error fetching profile:', error);
      }
    };
    
    fetchProfile();
  }, [useProfileData]);
  
  const calculateAge = (birthDate) => {
    if (!birthDate) return '';
    const dob = new Date(birthDate);
    const diff = Date.now() - dob.getTime();
    const ageDate = new Date(diff);
    return Math.abs(ageDate.getUTCFullYear() - 1970).toString();
  };
  
  const handleToggleProfileData = () => {
    setUseProfileData(!useProfileData);
    if (!useProfileData && userProfile) {
      // If enabling profile data, fill the form
      setAge(calculateAge(userProfile.date_of_birth));
      setGender(userProfile.gender || '');
    } else {
      // If disabling, clear the form
      setAge('');
      setGender('');
      setMedicalHistory('');
    }
  };

  const analyzeSymptoms = async () => {
    if (!symptoms.trim()) {
      setNotification({
        message: 'Please enter your symptoms',
        type: 'warning'
      });
      return;
    }

    setLoading(true);
    setError(null);
    
    try {
      const prompt = `
      I'm experiencing the following symptoms: ${symptoms}
      ${age ? `Age: ${age}` : ''}
      ${gender ? `Gender: ${gender}` : ''}
      ${duration ? `Duration of symptoms: ${duration}` : ''}
      ${medicalHistory ? `Medical history: ${medicalHistory}` : ''}
      
      Please provide:
      1. Possible conditions that might cause these symptoms
      2. Urgency level (when to seek medical attention)
      3. Recommended next steps
      4. Questions a doctor might ask about these symptoms
      `;
      
      const response = await openai.chat.completions.create({
        model: MODELS.GPT4,
        messages: [
          {
            role: "system",
            content: "You are a medical information assistant. Provide helpful information about symptoms, but always clarify you're not giving medical advice or diagnosis. Be thorough but clear. Present information in an organized way with sections. Include urgency recommendations when appropriate (when to see a doctor immediately vs. when it's safe to wait)."
          },
          { role: "user", content: prompt }
        ],
        temperature: 0.3,
      });

      // Parse the response
      const analysisText = response.choices[0].message.content;
      
      // Structure the analysis results
      const structuredResults = {
        symptoms: symptoms,
        age: age,
        gender: gender,
        medicalHistory: medicalHistory,
        duration: duration,
        analysis: analysisText,
        disclaimer: "This analysis is generated by AI and is not a medical diagnosis. Please consult with a healthcare professional.",
        date: new Date().toISOString()
      };
      
      setResults(structuredResults);
      
      // Save to database
      await saveAnalysisToDatabase(structuredResults);
      
    } catch (err) {
      console.error("Error analyzing symptoms:", err);
      setError("Error analyzing symptoms. Please try again.");
      setNotification({
        message: 'Error analyzing symptoms: ' + err.message,
        type: 'danger'
      });
    } finally {
      setLoading(false);
    }
  };

  const saveAnalysisToDatabase = async (analysisData) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;
      
      // Save the analysis record
      const { error: dbError } = await supabase
        .from('symptom_analyses')
        .insert([
          {
            user_id: user.id,
            symptoms: analysisData.symptoms,
            age: analysisData.age,
            gender: analysisData.gender,
            medical_history: analysisData.medicalHistory,
            duration: analysisData.duration,
            analysis_result: analysisData.analysis,
            created_at: new Date().toISOString()
          }
        ]);
      
      if (dbError) throw dbError;
      
    } catch (error) {
      console.error('Error saving analysis:', error);
    }
  };

  const resetForm = () => {
    setSymptoms('');
    if (!useProfileData) {
      setAge('');
      setGender('');
      setMedicalHistory('');
    }
    setDuration('');
    setResults(null);
    setError(null);
  };

  return (
    <div className="container py-4">
      {notification && (
        <div className={`alert alert-${notification.type} alert-dismissible fade show`}>
          {notification.message}
          <button 
            type="button" 
            className="btn-close" 
            onClick={() => setNotification(null)}
          ></button>
        </div>
      )}

      <h1 className="mb-4">Symptom Checker</h1>
      
      <div className="row">
        <div className="col-lg-6">
          <div className="card shadow-sm mb-4">
            <div className="card-body">
              <h5 className="card-title">Describe Your Symptoms</h5>
              <p className="card-text text-muted">
                Enter your symptoms and details to get possible causes and recommendations.
              </p>
              
              {userProfile && (
                <div className="form-check form-switch mb-3">
                  <input 
                    className="form-check-input" 
                    type="checkbox" 
                    id="useProfileData"
                    checked={useProfileData}
                    onChange={handleToggleProfileData}
                  />
                  <label className="form-check-label" htmlFor="useProfileData">
                    Use my profile data
                  </label>
                </div>
              )}
              
              <div className="mb-3">
                <label htmlFor="symptoms" className="form-label">Symptoms*</label>
                <textarea
                  id="symptoms"
                  className="form-control"
                  rows="4"
                  value={symptoms}
                  onChange={(e) => setSymptoms(e.target.value)}
                  placeholder="Describe your symptoms in detail (e.g., headache, fever, fatigue)"
                ></textarea>
              </div>
              
              <div className="row mb-3">
                <div className="col">
                  <label htmlFor="age" className="form-label">Age</label>
                  <input
                    type="text"
                    className="form-control"
                    id="age"
                    value={age}
                    onChange={(e) => setAge(e.target.value)}
                    disabled={useProfileData && userProfile?.date_of_birth}
                  />
                </div>
                <div className="col">
                  <label htmlFor="gender" className="form-label">Gender</label>
                  <select
                    id="gender"
                    className="form-select"
                    value={gender}
                    onChange={(e) => setGender(e.target.value)}
                    disabled={useProfileData && userProfile?.gender}
                  >
                    <option value="">Select</option>
                    <option value="male">Male</option>
                    <option value="female">Female</option>
                    <option value="other">Other</option>
                  </select>
                </div>
              </div>
              
              <div className="mb-3">
                <label htmlFor="duration" className="form-label">Duration of Symptoms</label>
                <input
                  type="text"
                  className="form-control"
                  id="duration"
                  value={duration}
                  onChange={(e) => setDuration(e.target.value)}
                  placeholder="How long have you had these symptoms? (e.g., 2 days, 1 week)"
                />
              </div>
              
              <div className="mb-3">
                <label htmlFor="medicalHistory" className="form-label">Medical History</label>
                <textarea
                  id="medicalHistory"
                  className="form-control"
                  rows="2"
                  value={medicalHistory}
                  onChange={(e) => setMedicalHistory(e.target.value)}
                  placeholder="Any existing medical conditions, medications, or allergies"
                  disabled={useProfileData && userProfile}
                ></textarea>
              </div>
              
              <div className="d-grid gap-2">
                <button 
                  className="btn btn-primary" 
                  onClick={analyzeSymptoms}
                  disabled={loading || !symptoms.trim()}
                >
                  {loading ? <><Spinner size="sm" /> Analyzing...</> : 'Check Symptoms'}
                </button>
                <button 
                  className="btn btn-outline-secondary" 
                  onClick={resetForm}
                  disabled={loading}
                >
                  Reset
                </button>
              </div>
            </div>
          </div>
        </div>
        
        <div className="col-lg-6">
          {loading ? (
            <div className="card shadow-sm mb-4">
              <div className="card-body text-center py-5">
                <Spinner />
                <p className="mt-3">Analyzing your symptoms...</p>
                <p className="text-muted small">This may take a moment</p>
              </div>
            </div>
          ) : results ? (
            <div className="card shadow-sm mb-4">
              <div className="card-header bg-primary text-white">
                <h5 className="card-title mb-0">Analysis Results</h5>
              </div>
              <div className="card-body">
                <div className="analysis-content">
                  {results.analysis.split('\n').map((paragraph, idx) => (
                    paragraph ? <p key={idx}>{paragraph}</p> : <br key={idx} />
                  ))}
                </div>
                <div className="alert alert-warning mt-3">
                  <strong>Important Disclaimer:</strong> {results.disclaimer}
                </div>
              </div>
              <div className="card-footer text-muted">
                <small>Analysis generated on {new Date(results.date).toLocaleString()}</small>
              </div>
            </div>
          ) : error ? (
            <div className="alert alert-danger">
              {error}
            </div>
          ) : (
            <div className="card shadow-sm mb-4">
              <div className="card-body p-5 text-center">
                <div className="text-muted mb-3">
                  <i className="fas fa-stethoscope fa-3x"></i>
                </div>
                <h5>Enter your symptoms to get started</h5>
                <p className="text-muted">
                  The AI will analyze your symptoms and provide possible causes and recommendations.
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
      
      <div className="mt-4">
        <div className="card shadow-sm">
          <div className="card-body">
            <h5>About Symptom Checker</h5>
            <p>
              This feature uses AI to analyze your symptoms and provide possible causes and recommendations.
              Please note that this is not a substitute for professional medical diagnosis.
              Always consult with a healthcare provider for proper evaluation.
            </p>
            <div className="row g-4 mt-2">
              <div className="col-md-6">
                <h6>Benefits</h6>
                <ul>
                  <li>Quick initial assessment of symptoms</li>
                  <li>Helpful information on possible conditions</li>
                  <li>Guidance on whether to seek immediate medical attention</li>
                  <li>Preparation for doctor consultations</li>
                </ul>
              </div>
              <div className="col-md-6">
                <h6>Limitations</h6>
                <ul>
                  <li>Not a replacement for professional medical advice</li>
                  <li>Cannot provide definitive diagnoses</li>
                  <li>May not consider all possible conditions</li>
                  <li>Accuracy depends on the completeness of information provided</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SymptomChecker;